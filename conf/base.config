/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    io-gmwi2-pipeline Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Resource configuration for microbiome analysis pipeline including MetaPhlAn,
    HUMAnN, and GMWI2 processes with dynamic memory allocation for heavy processes.
----------------------------------------------------------------------------------------
*/

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

process {

    // Default resources for basic processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time   = { check_max( 2.h  * task.attempt, 'time'   ) }

    errorStrategy = 'retry'
    maxRetries    = 3
    maxErrors     = '-1'
    cache         = true
    maxForks      = 10

    // ===================================================================
    // LIGHT PROCESSES - Fixed resource allocation
    // ===================================================================
    
    withLabel:process_single {
        cpus   = 1
        memory = { check_max( 1.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h  * task.attempt, 'time'   ) }
    }
    
    withLabel:process_low {
        cpus   = 2
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h  * task.attempt, 'time'   ) }
    }
    
    withLabel:process_medium {
        cpus   = 4
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    }
    
    // GMWI2 calculation processes
    withLabel:RUN_GMWI2 {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }

    // MetaPhlAn specific processes
    withName:RUN_METAPHLAN {
        label  = 'process_metaphlan'
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { 
            def inputSize = reads.size()
            def baseMemory = Math.max(8.GB, (inputSize * 0.000000002))
            check_max( baseMemory * task.attempt, 'memory' )
        }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }

    // HUMAnN specific processes
    withName:RUN_HUMANN {
        label  = 'process_humann'
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { 
            def inputSize = reads.size()
            def baseMemory = Math.max(32.GB, (inputSize * 0.000000008)) // Higher multiplier for HUMAnN
            check_max( baseMemory * task.attempt, 'memory' )
        }
        time   = { check_max( 48.h * task.attempt, 'time' ) }
        disk   = { check_max( 100.GB * task.attempt, 'disk' ) }
    }
}