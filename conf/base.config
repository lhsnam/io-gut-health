/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    io-gmwi2-pipeline Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Resource configuration for microbiome analysis pipeline including MetaPhlAn,
    HUMAnN, and GMWI2 processes with dynamic memory allocation for heavy processes.
----------------------------------------------------------------------------------------
*/

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

process {

    // Default resources for basic processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time   = { check_max( 2.h  * task.attempt, 'time'   ) }

    errorStrategy = 'retry'
    maxRetries    = 3
    maxErrors     = '-1'
    cache         = true
    maxForks      = 10

    // ===================================================================
    // LIGHT PROCESSES - Fixed resource allocation
    // ===================================================================
    
    withLabel:process_single {
        cpus   = 1
        memory = { check_max( 1.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h  * task.attempt, 'time'   ) }
    }
    
    withLabel:process_low {
        cpus   = 2
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h  * task.attempt, 'time'   ) }
    }
    
    withLabel:process_medium {
        cpus   = 4
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    }

    // ===================================================================
    // HEAVY PROCESSES - Dynamic resource allocation
    // ===================================================================
    
    // MetaPhlAn processes - memory based on input file size
    withLabel:process_metaphlan {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { 
            def inputSize = meta.single_end ? reads.size() : (reads[0].size() + reads[1].size())
            def baseMemory = Math.max(8.GB, (inputSize * 0.000000002).toInteger()) // ~2 bytes per input byte, min 8GB
            check_max( baseMemory * task.attempt, 'memory' )
        }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    // HUMAnN processes - very memory intensive
    withLabel:process_humann {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { 
            def inputSize = meta.single_end ? reads.size() : (reads[0].size() + reads[1].size())
            def baseMemory = Math.max(16.GB, (inputSize * 0.000000004).toInteger()) // ~4 bytes per input byte, min 16GB
            check_max( baseMemory * task.attempt, 'memory' )
        }
        time   = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    // GMWI2 calculation processes
    withLabel:process_gmwi2 {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }
    
    // QIIME2 processes
    withLabel:process_qiime2 {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }
    
    // Q2 Predict Dysbiosis
    withLabel:process_q2_dysbiosis {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }

    // ===================================================================
    // ERROR HANDLING LABELS
    // ===================================================================
    
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }

    // ===================================================================
    // PROCESS-SPECIFIC CONFIGURATIONS
    // ===================================================================
    
    // Input validation and preparation
    withName:INPUT_CHECK {
        cpus   = 1
        memory = '1.GB'
        time   = '30.min'
    }
    
    withName:PREPARATION_INPUT {
        cpus   = 1
        memory = '2.GB'
        time   = '1.h'
    }

    // MetaPhlAn specific processes
    withName:RUN_METAPHLAN {
        label  = 'process_metaphlan'
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { 
            def inputSize = reads.size()
            def baseMemory = Math.max(8.GB, (inputSize * 0.000000002))
            check_max( baseMemory * task.attempt, 'memory' )
        }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    withName:METAPHLAN_QIIMEPREP {
        cpus   = 2
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }

    // HUMAnN specific processes
    withName:RUN_HUMANN {
        label  = 'process_humann'
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { 
            def inputSize = reads.size()
            def baseMemory = Math.max(32.GB, (inputSize * 0.000000008)) // Higher multiplier for HUMAnN
            check_max( baseMemory * task.attempt, 'memory' )
        }
        time   = { check_max( 48.h * task.attempt, 'time' ) }
        disk   = { check_max( 100.GB * task.attempt, 'disk' ) }
    }

    // QIIME2 processes
    withName:'QIIME_.*' {
        label  = 'process_qiime2'
    }
    
    withName:QIIME_IMPORT {
        cpus   = 2
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }
    
    withName:QIIME_DATAMERGE {
        cpus   = 4
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 6.h * task.attempt, 'time' ) }
    }

    // Q2 Manifest and Dysbiosis prediction
    withName:Q2_MANIFEST {
        cpus   = 2
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }
    
    withName:Q2_PREDICT_DYSBIOSIS {
        label  = 'process_q2_dysbiosis'
        cpus   = 2
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }

    // GMWI2 processes
    withName:CALCULATE_SCORES {
        label  = 'process_gmwi2'
        cpus   = 2
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }
    
    withName:PLOT_SCORES {
        cpus   = 1
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time' ) }
    }

    // File conversion and processing
    withName:'.*CONVERT.*' {
        cpus   = 1
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 1.h * task.attempt, 'time' ) }
    }

    // Version collection
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
        cpus   = 1
        memory = '1.GB'
        time   = '10.min'
    }

    // ===================================================================
    // SPECIAL ERROR HANDLING
    // ===================================================================
    
    // Allow HUMAnN to retry with more resources on failure
    withName:RUN_HUMANN {
        errorStrategy = { task.exitStatus in [130, 131, 137, 143, 247] ? 'retry' : 'finish' }
        maxRetries = 3
    }
    
    // MetaPhlAn can sometimes have memory issues
    withName:RUN_METAPHLAN {
        errorStrategy = { task.exitStatus in [137, 143] ? 'retry' : 'finish' }
        maxRetries = 2
    }
    
    // QIIME processes might fail with empty input
    withName:'QIIME_.*' {
        errorStrategy = { task.exitStatus in [1, 2] ? 'ignore' : 'retry' }
        maxRetries = 1
    }
}